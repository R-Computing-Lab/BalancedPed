df_p5c2 <- data.frame(Nped = SSize_p5c2,
power = powVec_p5c2,
Combination = rep("power1", num_ped))
### create a new enviroment for one condition
env_p5c5 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c5/modelSmr.Rdata", envir = env_p5c5)
meanDiffLL_mtam_p5c5 <- env_p5c5$smr2$Minus2LogLikelihood - env_p5c5$smr1$Minus2LogLikelihood
lamdaUnit_p5c5 <- meanDiffLL_mtam_p5c5/env_p5c5$smr1$numObs
SSize_p5c5 <- 1: num_ped
LamdaVec_p5c5 <- lamdaUnit_p5c5*SSize_p5c5
powVec_p5c5 <- as.numeric(lapply(LamdaVec_p5c5,powerCal, df = 2))
df_p5c5 <- data.frame(Nped = SSize_p5c5,
power = powVec_p5c5,
Combination = rep("power2", num_ped))
### create a new enviroment for one condition
env_p5c8 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c8/modelSmr.Rdata", envir = env_p5c8)
meanDiffLL_mtam_p5c8 <- env_p5c8$smr2$Minus2LogLikelihood - env_p5c8$smr1$Minus2LogLikelihood
lamdaUnit_p5c8 <- meanDiffLL_mtam_p5c8/env_p5c8$smr1$numObs
SSize_p5c8 <- 1: num_ped
LamdaVec_p5c8 <- lamdaUnit_p5c8*SSize_p5c8
powVec_p5c8 <- as.numeric(lapply(LamdaVec_p5c8,powerCal, df = 2))
df_p5c8 <- data.frame(Nped = SSize_p5c8,
power = powVec_p5c8,
Combination = rep("power3", num_ped))
### create a new enviroment for one condition
env_p5c11 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c11/modelSmr.Rdata", envir = env_p5c11)
meanDiffLL_mtam_p5c11 <- env_p5c11$smr2$Minus2LogLikelihood - env_p5c11$smr1$Minus2LogLikelihood
lamdaUnit_p5c11 <- meanDiffLL_mtam_p5c11/env_p5c11$smr1$numObs
SSize_p5c11 <- 1: num_ped
LamdaVec_p5c11 <- lamdaUnit_p5c11*SSize_p5c11
powVec_p5c11 <- as.numeric(lapply(LamdaVec_p5c11,powerCal, df = 2))
df_p5c11 <- data.frame(Nped = SSize_p5c11,
power = powVec_p5c11,
Combination = rep("power4", num_ped))
### create a data frame for graphs
df_p5 <- rbind(df_p5c2, df_p5c5, df_p5c8, df_p5c11)
df_p5$Combination <- as.factor(df_p5$Combination)
g1 <-ggplot(data = df_p5)+ geom_line(mapping = aes(x = Nped, y = power, color= Combination), size = .5) +
scale_color_manual(values=my_palette[1:4],
name="Variance Combinations",
breaks=c("power1", "power2", "power3","power4"),
labels=c("a\u00B2 = .6, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .4, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .2, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .4, mt\u00B2 = .05, j\u00B2 = .05, d\u00B2 = .1")
)+
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_line(color = "transparent"),
axis.line = element_line(size = 1, colour = "black"),
#axis.line.y = element_blank(),
axis.text = element_text( color = "black"),
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
text=element_text( family="Calibri",  size = 8),
legend.spacing = unit(-17,'pt'),
legend.margin = margin(t=0,b=0,unit='pt'),
legend.background = element_rect(),
legend.position=c(.8,.2))+
xlab("N of Pedigrees")+
scale_y_continuous(n.breaks = 6)+
ylab("Power:mt\u00B2+j\u00B2")+
geom_hline(yintercept = .8, linetype = 5, size = .8, color = "grey")
# +
# annotate(geom = "text",x = 0.62, y =.92, label = "a\u00B2 = .6", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.73, y =.6, label = "a\u00B2 = .4", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.9, y =.6, label = "a\u00B2 = .2", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.9, y =.6, label = "a\u00B2 = .4, d\u00B2 = .1", family="Calibri", color = "gray40",size = 3)
g1
ggsave( "~/R-Project/BalancedPed/Simulations/p5/graph1.png",g1, width = 6, height = 4.5,  type = "cairo-png", dpi = 900)
#rm(list = ls())
# script to plot power plots
library(ggplot2)
powerCal <- function(lamda,df){
1- pchisq(qchisq(1-.05, df), df, lamda)
}
my_palette <- c("#377EB8", "#E69F00", "#4DAF4A", "#984EA3",  "#56B4E9", "#A6CE39", "#A9A9A9", "#E41A1C")
num_ped <- 100
### create a new enviroment for one condition
env_p5c2 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c2/modelSmr.Rdata", envir = env_p5c2)
meanDiffLL_mtam_p5c2 <- env_p5c2$smr2$Minus2LogLikelihood - env_p5c2$smr1$Minus2LogLikelihood
lamdaUnit_p5c2 <- meanDiffLL_mtam_p5c2/env_p5c2$smr1$numObs
SSize_p5c2 <- 1: num_ped
LamdaVec_p5c2 <- lamdaUnit_p5c2*SSize_p5c2
powVec_p5c2 <- as.numeric(lapply(LamdaVec_p5c2,powerCal, df = 2))
df_p5c2 <- data.frame(Nped = SSize_p5c2,
power = powVec_p5c2,
Combination = rep("power1", num_ped))
### create a new enviroment for one condition
env_p5c5 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c5/modelSmr.Rdata", envir = env_p5c5)
meanDiffLL_mtam_p5c5 <- env_p5c5$smr2$Minus2LogLikelihood - env_p5c5$smr1$Minus2LogLikelihood
lamdaUnit_p5c5 <- meanDiffLL_mtam_p5c5/env_p5c5$smr1$numObs
SSize_p5c5 <- 1: num_ped
LamdaVec_p5c5 <- lamdaUnit_p5c5*SSize_p5c5
powVec_p5c5 <- as.numeric(lapply(LamdaVec_p5c5,powerCal, df = 2))
df_p5c5 <- data.frame(Nped = SSize_p5c5,
power = powVec_p5c5,
Combination = rep("power2", num_ped))
### create a new enviroment for one condition
env_p5c8 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c8/modelSmr.Rdata", envir = env_p5c8)
meanDiffLL_mtam_p5c8 <- env_p5c8$smr2$Minus2LogLikelihood - env_p5c8$smr1$Minus2LogLikelihood
lamdaUnit_p5c8 <- meanDiffLL_mtam_p5c8/env_p5c8$smr1$numObs
SSize_p5c8 <- 1: num_ped
LamdaVec_p5c8 <- lamdaUnit_p5c8*SSize_p5c8
powVec_p5c8 <- as.numeric(lapply(LamdaVec_p5c8,powerCal, df = 2))
df_p5c8 <- data.frame(Nped = SSize_p5c8,
power = powVec_p5c8,
Combination = rep("power3", num_ped))
### create a new enviroment for one condition
env_p5c11 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p5/p5c11/modelSmr.Rdata", envir = env_p5c11)
meanDiffLL_mtam_p5c11 <- env_p5c11$smr2$Minus2LogLikelihood - env_p5c11$smr1$Minus2LogLikelihood
lamdaUnit_p5c11 <- meanDiffLL_mtam_p5c11/env_p5c11$smr1$numObs
SSize_p5c11 <- 1: num_ped
LamdaVec_p5c11 <- lamdaUnit_p5c11*SSize_p5c11
powVec_p5c11 <- as.numeric(lapply(LamdaVec_p5c11,powerCal, df = 2))
df_p5c11 <- data.frame(Nped = SSize_p5c11,
power = powVec_p5c11,
Combination = rep("power4", num_ped))
### create a data frame for graphs
df_p5 <- rbind(df_p5c2, df_p5c5, df_p5c8, df_p5c11)
df_p5$Combination <- as.factor(df_p5$Combination)
g1 <-ggplot(data = df_p5)+ geom_line(mapping = aes(x = Nped, y = power, color= Combination), size = 1.5) +
scale_color_manual(values=my_palette[1:4],
name="Variance Combinations",
breaks=c("power1", "power2", "power3","power4"),
labels=c("a\u00B2 = .6, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .4, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .2, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .4, mt\u00B2 = .05, j\u00B2 = .05, d\u00B2 = .1")
)+
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_line(color = "transparent"),
axis.line = element_line(size = 1, colour = "black"),
#axis.line.y = element_blank(),
axis.text = element_text( color = "black"),
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
text=element_text( family="Calibri",  size = 8),
legend.spacing = unit(-17,'pt'),
legend.margin = margin(t=0,b=0,unit='pt'),
legend.background = element_rect(),
legend.position=c(.8,.2))+
xlab("N of Pedigrees")+
scale_y_continuous(n.breaks = 6)+
ylab("Power:mt\u00B2+j\u00B2")+
geom_hline(yintercept = .8, linetype = 5, size = .8, color = "grey")
# +
# annotate(geom = "text",x = 0.62, y =.92, label = "a\u00B2 = .6", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.73, y =.6, label = "a\u00B2 = .4", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.9, y =.6, label = "a\u00B2 = .2", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.9, y =.6, label = "a\u00B2 = .4, d\u00B2 = .1", family="Calibri", color = "gray40",size = 3)
g1
ggsave( "~/R-Project/BalancedPed/Simulations/p5/graph1.png",g1, width = 6, height = 4.5,  type = "cairo-png", dpi = 900)
#rm(list = ls())
# script to plot power plots
library(ggplot2)
powerCal <- function(lamda,df){
1- pchisq(qchisq(1-.05, df), df, lamda)
}
my_palette <- c("#377EB8", "#E69F00", "#4DAF4A", "#984EA3",  "#56B4E9", "#A6CE39", "#A9A9A9", "#E41A1C")
num_ped <- 20
### create a new enviroment for one condition
env_p8c2 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p8/p8c2/modelSmr.Rdata", envir = env_p8c2)
meanDiffLL_mtam_p8c2 <- env_p8c2$smr2$Minus2LogLikelihood - env_p8c2$smr1$Minus2LogLikelihood
lamdaUnit_p8c2 <- meanDiffLL_mtam_p8c2/env_p8c2$smr1$numObs
SSize_p8c2 <- 1: num_ped
LamdaVec_p8c2 <- lamdaUnit_p8c2*SSize_p8c2
powVec_p8c2 <- as.numeric(lapply(LamdaVec_p8c2,powerCal, df = 2))
df_p8c2 <- data.frame(Nped = SSize_p8c2,
power = powVec_p8c2,
Combination = rep("power1", num_ped))
### create a new enviroment for one condition
env_p8c5 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p8/p8c5/modelSmr.Rdata", envir = env_p8c5)
meanDiffLL_mtam_p8c5 <- env_p8c5$smr2$Minus2LogLikelihood - env_p8c5$smr1$Minus2LogLikelihood
lamdaUnit_p8c5 <- meanDiffLL_mtam_p8c5/env_p8c5$smr1$numObs
SSize_p8c5 <- 1: num_ped
LamdaVec_p8c5 <- lamdaUnit_p8c5*SSize_p8c5
powVec_p8c5 <- as.numeric(lapply(LamdaVec_p8c5,powerCal, df = 2))
df_p8c5 <- data.frame(Nped = SSize_p8c5,
power = powVec_p8c5,
Combination = rep("power2", num_ped))
### create a new enviroment for one condition
env_p8c8 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p8/p8c8/modelSmr.Rdata", envir = env_p8c8)
meanDiffLL_mtam_p8c8 <- env_p8c8$smr2$Minus2LogLikelihood - env_p8c8$smr1$Minus2LogLikelihood
lamdaUnit_p8c8 <- meanDiffLL_mtam_p8c8/env_p8c8$smr1$numObs
SSize_p8c8 <- 1: num_ped
LamdaVec_p8c8 <- lamdaUnit_p8c8*SSize_p8c8
powVec_p8c8 <- as.numeric(lapply(LamdaVec_p8c8,powerCal, df = 2))
df_p8c8 <- data.frame(Nped = SSize_p8c8,
power = powVec_p8c8,
Combination = rep("power3", num_ped))
### create a new enviroment for one condition
env_p8c11 <- new.env()
load("~/R-Project/BalancedPed/Simulations/p8/p8c11/modelSmr.Rdata", envir = env_p8c11)
meanDiffLL_mtam_p8c11 <- env_p8c11$smr2$Minus2LogLikelihood - env_p8c11$smr1$Minus2LogLikelihood
lamdaUnit_p8c11 <- meanDiffLL_mtam_p8c11/env_p8c11$smr1$numObs
SSize_p8c11 <- 1: num_ped
LamdaVec_p8c11 <- lamdaUnit_p8c11*SSize_p8c11
powVec_p8c11 <- as.numeric(lapply(LamdaVec_p8c11,powerCal, df = 2))
df_p8c11 <- data.frame(Nped = SSize_p8c11,
power = powVec_p8c11,
Combination = rep("power4", num_ped))
### create a data frame for graphs
df_p8 <- rbind(df_p8c2, df_p8c5, df_p8c8, df_p8c11)
df_p8$Combination <- as.factor(df_p8$Combination)
g1 <-ggplot(data = df_p8)+ geom_line(mapping = aes(x = Nped, y = power, color= Combination), size = 1.5) +
scale_color_manual(values=my_palette[1:4],
name="Variance Combinations",
breaks=c("power1", "power2", "power3","power4"),
labels=c("a\u00B2 = .6, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .4, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .2, mt\u00B2 = .05, j\u00B2 = .05",
"a\u00B2 = .4, mt\u00B2 = .05, j\u00B2 = .05, d\u00B2 = .1")
)+
theme(panel.background = element_rect(fill = "transparent"),
panel.grid = element_line(color = "transparent"),
axis.line = element_line(size = 1, colour = "black"),
#axis.line.y = element_blank(),
axis.text = element_text( color = "black"),
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
text=element_text( family="Calibri",  size = 8),
legend.spacing = unit(-17,'pt'),
legend.margin = margin(t=0,b=0,unit='pt'),
legend.background = element_rect(),
legend.position=c(.8,.2))+
xlab("N of Pedigrees")+
scale_y_continuous(n.breaks = 6)+
ylab("Power:mt\u00B2+j\u00B2")+
geom_hline(yintercept = .8, linetype = 5, size = .8, color = "grey")
# +
# annotate(geom = "text",x = 0.62, y =.92, label = "a\u00B2 = .6", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.73, y =.6, label = "a\u00B2 = .4", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.9, y =.6, label = "a\u00B2 = .2", family="Calibri", color = "gray40",size = 3)+
# annotate(geom = "text",x = 0.9, y =.6, label = "a\u00B2 = .4, d\u00B2 = .1", family="Calibri", color = "gray40",size = 3)
g1
ggsave( "~/R-Project/BalancedPed/Simulations/p8/graph1.png",g1, width = 6, height = 4.5,  type = "cairo-png", dpi = 900)
rm(list = ls())
library("fs")
library("purrr")
# Specify the folder path and pattern to search
folder_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
pattern1 <- "setwd(dirname(rstudioapi::getActiveDocumentContext()$path))"
pattern2 <- "~/R-Project/BalancedPed/evenInsert.R"
pattern3 <- "~/R-Project/BalancedPed/famSizeCal.R"
pattern4 <- "~/R-Project/BalancedPed/SimPed.R"
pattern5 <- "mxMatrix(type = \"Full\", nrow = 1, ncol = 1, free = TRUE, values = dd2[comb]*totalVar, labels = \"vdd\", name = \"Vdd\", lbound = 1e-10)"
pattern6 <- "mxMatrix(\"Symm\", nrow=fsize, ncol=fsize, values=Dmgmat, name=\"D\"), "
pattern7 <- "+ (D %x% ModelOne.Vdd)"
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
matching_lines <- grep(pattern, lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern6)
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern7)
# Specify the folder path and pattern to search
folder_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
pattern1 <- "setwd(dirname(rstudioapi::getActiveDocumentContext()$path))"
pattern2 <- "~/R-Project/BalancedPed/evenInsert.R"
pattern3 <- "~/R-Project/BalancedPed/famSizeCal.R"
pattern4 <- "~/R-Project/BalancedPed/SimPed.R"
pattern5 <- "nrow = 1, ncol = 1, free = TRUE, values = dd2[comb]*totalVar,"
pattern6 <- 'nrow=fsize, ncol=fsize, values=Dmgmat, name="D"'
pattern7 <- "D %x% ModelOne.Vdd"
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
matching_lines <- grep(pattern, lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern6)
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern7)
pattern5 <- "values = dd2[comb]*totalVar"
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
pattern5 <- "dd2[comb]*totalVar"
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
pattern5 <- "dd2[comb]"
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
print(lines)
matching_lines <- grep(pattern, lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
matching_lines <- grep(pattern, lines)
print(limatching_lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
matching_lines <- grep(pattern, lines)
print(matching_lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
pattern5 <- "      mxMatrix(type = \"Full\", nrow = 1, ncol = 1, free = TRUE, values = dd2[comb]*totalVar, labels = \"vdd\", name = \"Vdd\", lbound = 1e-10),"
pattern6 <- "                                   mxMatrix(\"Symm\", nrow=fsize3, ncol=fsize3, values=Dmgmat, name=\"D\"), "
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
matching_lines <- grep(pattern, lines)
print(matching_lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
?grep
pattern5 <- "values = dd2[comb]*totalVar,"
pattern6 <- "                                   mxMatrix(\"Symm\", nrow=fsize3, ncol=fsize3, values=Dmgmat, name=\"D\"), "
# Function to comment out lines matching the pattern in a file
comment_matching_lines <- function(file_path, pattern) {
lines <- readLines(file_path)
matching_lines <- grep(pattern, lines)
print(matching_lines)
if (length(matching_lines) > 0) {
lines[matching_lines] <- paste0("#", lines[matching_lines])
writeLines(lines, file_path)
}
}
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern2)
#
# # Find all .R files in the folder and subfolders
# r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE, fail = FALSE)
#
# # Comment out the lines matching the pattern in all .R files
# walk(r_files, comment_matching_lines, pattern = pattern3)
#
# Find all .R files in the folder and subfolders
r_files <- dir_ls(folder_path, regexp = "\\.R$", recurse = TRUE)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
pattern5 <- "values = dd2[comb]"
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
pattern5 <- 'labels = "vdd"'
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern5)
pattern6 <- 'name="D"'
# Comment out the lines matching the pattern in all .R files
walk(r_files, comment_matching_lines, pattern = pattern6)
run_protected_loop <- function(){
for (p in 1: 7){
for (c in 1: 11){
dir <- paste0("~/R-Project/BalancedPed/Simulations/p",p,"/p",p, "c",c)
if (dir.exists(dir)){
cat("starttime:", as.character(Sys.time()))
cat("running", dir)
setwd(dir)
source(paste0("p",p,"c",c,".R"))
cat("finished at" , as.character(Sys.time()))
}else{
next
}
}
}
}
## Run all the scripts
run_protected_loop()
