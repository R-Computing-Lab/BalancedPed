containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
## The final function:
# kpc: kids per couple
# Ngen: number of generations
# sexR: sex ratio for offspring
# marR: marriage rate (Note: Consider the terminology)
# balancedSex: if the sex of kids is balanced within a specific generation
# balancedMar: if the married couples are balanced within a specific generation
SimPed <- function(kpc = 3,
Ngen = 4,
sexR = .5,
marR = 2/3,
balancedSex = FALSE,
balancedmar = FALSE
){
# SexRatio: ratio of male over female in the offspring setting; used in the between generation combinations
SexRatio <- sexR/(1-sexR)
# Calculate the expected family size in each generations
sizeGens <- allGens(kpc = kpc, Ngen = Ngen, marR = marR)
famSizeIndex <- 1:sum(sizeGens)
# Step 1: Let's build the connection within each generation first
for (i in 1: Ngen) {
idGen <- as.numeric(paste(100,i,1:sizeGens[i],sep = ""))
# idGen <- ifelse(i==1,
#                 paste(i,"-",1:sizeGens[i]),
#                 paste(i,"-",sizeGens[i-1]:sizeGens[i]))
### For each generation, create a seperate dataframe
df_Ngen <- data.frame(
fam = rep(paste("fam",1), sizeGens[i], sep = ""),
id = idGen[1:sizeGens[i]],
gen = rep(i, sizeGens[i]),
pat = rep(NA, sizeGens[i]), # father id
mat = rep(NA, sizeGens[i]), # mother id
spt = rep(NA, sizeGens[i]), # spouse id
sex = rep(NA, sizeGens[i])
)
### Let's deal with the sex in each generation first
if(runif(1) > .5){
sexVec1 <- rep("g1",
floor(length(idGen)*sexR))
sexVec2 <- rep("g2",
length(idGen)-length(sexVec1))
sexVec <- sample(c(sexVec1, sexVec2))
sexVec[sexVec=="g1"] <- "M"
sexVec[sexVec=="g2"] <- "F"
} else{
sexVec1 <- rep("g1",
floor(length(idGen)*(1-sexR)))
sexVec2 <- rep("g2",
length(idGen)-length(sexVec1))
sexVec <- sample(c(sexVec1, sexVec2))
sexVec[sexVec=="g1"] <- "F"
sexVec[sexVec=="g2"] <- "M"
}
df_Ngen$sex <- sexVec
#print(paste("tiger",i))
# The first generation
if (i==1){
df_Ngen$spt[1] <- df_Ngen$id[2]
df_Ngen$spt[2] <- df_Ngen$id[1]
df_Ngen$sex[1] <- "F"
df_Ngen$sex[2] <- "M"
}
## Connect male and female into couples in each generations
marR_crt <- (1+marR)/2
UsedIdFeMale <- numeric()
UsedIdMale <- numeric()
# reserve the single persons
if (i!=1 & i!= Ngen){
nMerriedFemale <- round(sum(df_Ngen$sex == "F") *marR_crt)
nMerriedMale <- round(sum(df_Ngen$sex == "M")*marR_crt)
# make sure there are same numbers of merried males and females
if(nMerriedFemale >= nMerriedMale){
nMerriedFemale <- nMerriedMale
} else {
nMerriedMale <- nMerriedFemale
}
# get the number of single males and females
nSingleFemale <- sum(df_Ngen$sex == "F") - nMerriedFemale
nSingleMale <- sum(df_Ngen$sex == "M") - nMerriedMale
# sample single ids from male ids and female ids
UsedIdFemale <- sample(df_Ngen$id[df_Ngen$sex == "F"], nSingleFemale)
##print(c("Used F", UsedIdFemale))
UsedIdMale <- sample(df_Ngen$id[df_Ngen$sex == "M"], nSingleMale)
##print(c("Used M", UsedIdMale))
UsedId <- c(UsedIdFemale, UsedIdMale)
# Create spouses
for(j in 1:nrow(df_Ngen)){
if(df_Ngen$id[j] %in% UsedId){
next
}else {
#idx <- j+1
if(df_Ngen$sex[j] == "F"){
for (k in (j+1):nrow(df_Ngen)){
idr <- df_Ngen$id[k]
tgt <- (!(idr %in% UsedId)) & df_Ngen$sex[k]=="M"
#tgt <- ifelse(is.na(tgt),FALSE,TRUE)
if(tgt){
df_Ngen$spt[j] <- df_Ngen$id[k]
df_Ngen$spt[k] <- df_Ngen$id[j]
UsedId <- c(UsedId, df_Ngen$id[j], df_Ngen$id[k])
break
} else {
next
}
}
}else {
for (k in (j+1):nrow(df_Ngen)){
idr <- df_Ngen$id[k]
tgt <- (!(idr %in% UsedId)) & df_Ngen$sex[k]=="F"
#tgt <- ifelse(is.na(tgt),FALSE,TRUE)
if(tgt){
df_Ngen$spt[j] <- df_Ngen$id[k]
df_Ngen$spt[k] <- df_Ngen$id[j]
UsedId <- c(UsedId, df_Ngen$id[j], df_Ngen$id[k])
break
} else {
next
}
}
}
}
#print(UsedId)
}
}
if(i == 1) {
df_Fam <- df_Ngen
} else {
df_Fam <- rbind(df_Fam, df_Ngen)
}
}
# Step 2: Let's try to build connection between each two generations
df_Fam$ifparent <- FALSE
df_Fam$ifson <- FALSE
df_Fam$ifdau <- FALSE
for (i in 1: Ngen){
# generation 1 doesn't need any mother and father
if (i == 1) {
df_Ngen <- df_Fam[df_Fam$gen==i,]
df_Ngen$ifparent <- TRUE
df_Ngen$ifson <- FALSE
df_Ngen$ifdau <- FALSE
df_Fam[df_Fam$gen==i,] <- df_Ngen
} else {
# calculate the number of couples in the i-1 th generation
N_couples <- (sizeGens[i-1] - sum(is.na(df_Fam$spt[df_Fam$gen == i-1])))*0.5
# calculate the number of members in the i th generation that have a link to the couples in the i-1 th generation
N_LinkedMem <- N_couples*kpc
# decompose the linked members into females and males respectively
N_LinkedFemale <- round(N_LinkedMem*(1-sexR))
N_LinkedMale <- N_LinkedMem-N_LinkedFemale
# Create a pool for used male children and female children respectively
UsedIdFemale <- character()
UsedIdMale <- character()
UsedId <- c(UsedIdFemale, UsedIdMale)
# get the df for the i the generation
df_Ngen <- df_Fam[df_Fam$gen==i,]
df_Ngen$ifparent <- FALSE
df_Ngen$ifson <- FALSE
df_Ngen$ifdau <- FALSE
df_Ngen$IdCouple <- as.character(NA)
df_Ngen <- df_Ngen[sample(nrow(df_Ngen)),]
# Start to connect children with mother and father
# Step 2.1: mark a group of potential sons and daughters in the i th generation
# try to rewrite the code
# count the number of couples in the i th gen
countCouple <- (nrow(df_Ngen)-sum(is.na(df_Ngen$spt)))*.5
# give each member a coupleId
UsedCoupleId <- character()
for (j in 1:sizeGens[i]){
if(df_Ngen$IdCouple[j] %in% UsedCoupleId){
next
} else {
if(is.na(df_Ngen$spt[j])){
df_Ngen$IdCouple[j] <- as.character(NA)
} else{
df_Ngen$IdCouple[j] <- paste(sort(c(df_Ngen$id[j], df_Ngen$spt[j]))[1],
sort(c(df_Ngen$id[j], df_Ngen$spt[j]))[2],
sep = "_")
UsedCoupleId <- c(UsedCoupleId, df_Ngen$id[j], df_Ngen$spt[j] )
}
}
}
# get the number of linked female and male children after excluding the single children
# print(N_LinkedMem)
# print(N_LinkedFemale)
# print(N_LinkedMale)
SingleF <- sum(df_Ngen$sex == "F" & is.na(df_Ngen$spt))
CoupleF <- N_LinkedFemale - SingleF
#print(CoupleF)
SingleM <- sum(df_Ngen$sex == "M" & is.na(df_Ngen$spt))
CoupleM <- N_LinkedMale - SingleM
#print(CoupleM)
# get all couple ids
#print(i)
#print(df_Ngen$IdCouple)
coupleID <- unique(df_Ngen$IdCouple[!is.na(df_Ngen$IdCouple)])
#print(coupleID)
if(i == Ngen){
CoupleF <- 0
}
coupleGirl <- sample(coupleID, CoupleF)
#print(coupleGirl)
coupleBoy <- coupleID[!coupleID %in% coupleGirl]
#print(coupleGirl)
#print(coupleBoy)
# single person should all be sons or daus
# change the ifson and ifdau based on coupleGirl and coupleBoy
for(j in 1:sizeGens[i]){
if(is.na(df_Ngen$spt[j])){
if (df_Ngen$sex[j]=="F"){
df_Ngen$ifdau[j] <- TRUE
#UsedId <- c(UsedId, df_Ngen$id[j])
} else {
df_Ngen$ifson[j] <- TRUE
#UsedId <- c(UsedId, df_Ngen$id[j])
}
} else{
if(df_Ngen$IdCouple[j] %in% coupleBoy & df_Ngen$sex[j]=="M"){
df_Ngen$ifson[j] <- TRUE
}else if(df_Ngen$IdCouple[j] %in% coupleGirl & df_Ngen$sex[j]=="F" ){
df_Ngen$ifdau[j] <- TRUE
}else {
next
}
}
}
#print(df_Ngen)
df_Ngen <- df_Ngen[order(as.numeric(rownames(df_Ngen))),,drop = FALSE]
df_Ngen <- df_Ngen[,-ncol(df_Ngen)]
df_Fam[df_Fam$gen==i,] <- df_Ngen
# Step 2.2: mark a group of potential parents in the i-1 th generation
df_Ngen <- df_Fam[df_Fam$gen==i-1,]
df_Ngen$ifparent <- FALSE
df_Ngen$ifson <- FALSE
df_Ngen$ifdau <- FALSE
df_Ngen <- df_Ngen[sample(nrow(df_Ngen)),]
# Create a pool for the used parents
UsedIdParents <- character()
for (k in 1:sizeGens[i-1]){
#first check if the number of married couples surpass the marriage rate
if(sum(df_Ngen$ifparent)/nrow(df_Ngen) >= marR){
break
} else{
#check if the id is used and if the member has married
if(!(df_Ngen$id[k] %in% UsedIdParents) & !is.na(df_Ngen$spt[k])){
df_Ngen$ifparent[k] <- TRUE
df_Ngen$ifparent[df_Ngen$spt == df_Ngen$id[k]] <- TRUE
UsedIdParents <- c(UsedIdParents, df_Ngen$id[k], df_Ngen$spt[k])
}else{
next
}
}
}
df_Ngen <- df_Ngen[order(as.numeric(rownames(df_Ngen))),,drop = FALSE]
df_Fam[df_Fam$gen==i-1,] <- df_Ngen
# Step 2.3: connect the i and i-1 th generation
if(i==1){
next
} else {
# get the df for i and i-1 th generations
df_Ngen <- df_Fam[df_Fam$gen %in% c(i,i-1),]
sizeI <- sizeGens[i-1]
sizeII <- sizeGens[i]
# create a vector with ordered ids that should be connected to a parent
#print(df_Ngen)
IdSon <- df_Ngen$id[df_Ngen$ifson == TRUE & df_Ngen$gen==i]
#print(IdSon)
IdDau <- df_Ngen$id[df_Ngen$ifdau == TRUE & df_Ngen$gen==i]
#print(IdDau)
IdOfp <- evenInsert(IdSon, IdDau)
# create two vectors for maId and paId; replicate the ids to match the same length as IdOfp
IdMa <- numeric()
IdPa <- numeric()
UsedId <- numeric()
for(l in 1:sizeI){
# check if the id is used
if(!df_Ngen$id[l] %in% UsedId){
# check if the member can be a parent
if(df_Ngen$ifparent[l] == TRUE & df_Ngen$sex[l] == "F"){
UsedId <- c(UsedId, df_Ngen$id[l], df_Ngen$spt[l])
IdMa <- c(IdMa, rep(df_Ngen$id[l], kpc))
IdPa <- c(IdPa, rep(df_Ngen$spt[l], kpc))
} else if(df_Ngen$ifparent[l] == TRUE & df_Ngen$sex[l] == "M"){
UsedId <- c(UsedId, df_Ngen$id[l], df_Ngen$spt[l])
IdPa <- c(IdPa,rep(df_Ngen$id[l], kpc))
IdMa <- c(IdMa,rep(df_Ngen$spt[l], kpc))
} else {
next
}
} else {
next
}
}
# the length of IdMa and IdPa can be longer than the vector of offspring, so truncated it
#print(IdPa)
#print(IdOfp)
if (length(IdPa)-length(IdOfp) > 0) {
IdPa <- IdPa[-sample.int(length(IdPa),size =length(IdPa)-length(IdOfp))]
} else if (length(IdPa)-length(IdOfp) < 0) {
IdOfp <- IdOfp[-sample.int(length(IdOfp),size =length(IdOfp)-length(IdPa))]
}
if (length(IdMa)- length(IdOfp) > 0){
IdMa <- IdMa[-sample.int(length(IdMa),size =length(IdMa)-length(IdOfp))]
}else if (length(IdMa)-length(IdOfp) < 0) {
IdOfp <- IdOfp[-sample.int(length(IdOfp),size =length(IdOfp)-length(IdMa))]
}
#print(IdPa)
#print(IdOfp)
# put the IdMa and IdPa into the dfFam with correspondent OfpId
for (m in 1: length(IdOfp)) {
df_Ngen[df_Ngen$id==IdOfp[m],"pat"] <- IdPa[m]
df_Ngen[df_Ngen$id==IdOfp[m],"mat"] <- IdMa[m]
}
#print(df_Ngen)
df_Fam[df_Fam$gen==i,] <- df_Ngen[df_Ngen$gen==i,]
df_Fam[df_Fam$gen==i-1,] <- df_Ngen[df_Ngen$gen==i-1,]
}
}
}
df_Fam <- df_Fam[,1:7]
df_Fam <- df_Fam[!(is.na(df_Fam$pat)&is.na(df_Fam$mat)&is.na(df_Fam$spt)),]
colnames(df_Fam)[c(2,4,5)] <- c("ID", "dadID", "momID")
print(df_Fam)
return(df_Fam)
}
x1 <- SimPed(kpc = 5, Ngen = 5, marR = .8)
View(x1)
x1 <- SimPed(kpc = 5, Ngen = 6)
View(x1)
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed(kpc = 5, Ngen = 6)
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .5
dd2 <- .0
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
# Trial-Combination 11
ad2 <- .5
dd2 <- .0
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(13271)
numfam <- 10
dat <- rmvnorm(numfam, sigma = sumCov)
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
#+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
View(Addmat)
save.image("C:/Users/lxy75/OneDrive/Documents/BalancedPed/0319kpc5ng6.RData")
View(dat)
?rmvnorm
###code to run first trial of simulation
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed()
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .5
dd2 <- .0
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(13271)
numfam <- 1000
dat <- rmvnorm(numfam, sigma = sumCov)
# fit ML model
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
#+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
