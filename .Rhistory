ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
# Trial-Combination 11
ad2 <- .5
dd2 <- .0
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(13271)
numfam <- 10
dat <- rmvnorm(numfam, sigma = sumCov)
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
#+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
View(Addmat)
save.image("C:/Users/lxy75/OneDrive/Documents/BalancedPed/0319kpc5ng6.RData")
View(dat)
?rmvnorm
###code to run first trial of simulation
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed()
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .5
dd2 <- .0
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(13271)
numfam <- 1000
dat <- rmvnorm(numfam, sigma = sumCov)
# fit ML model
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
#+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
load("~/R-Project/BalancedPed/0319kpc5ng6.RData")
summary(containerRun)
View(sampleFam)
View(dat)
###code to run first trial of simulation
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed()
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .4
dd2 <- .1
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(13271)
numfam <- 1000
dat <- rmvnorm(numfam, sigma = sumCov)
# fit ML model
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
###code to run first trial of simulation
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed()
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .4
dd2 <- .1
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(13271)
numfam <- 200
dat <- rmvnorm(numfam, sigma = sumCov)
# fit ML model
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
###code to run first trial of simulation
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed()
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .4
dd2 <- .1
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .00
ee2 <- .25
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(814)
numfam <- 200
dat <- rmvnorm(numfam, sigma = sumCov)
# fit ML model
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
#mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
#mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
#+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
###code to run first trial of simulation
source("evenInsert.R")
source("famSizeCal.R")
source("SimPed.R")
source("HelperFunctions.R")
library(OpenMx)
sampleFam <- SimPed()
Addmat <- as.matrix(ped2add(sampleFam, verbose = TRUE))
Nucmat <- ped2cn(sampleFam)
Extmat <- ped2ce(sampleFam)
Mtdmat <- ped2mt_v3(sampleFam)
Envmat <- diag(1,nrow = nrow(Addmat))
dimnames(Envmat) <- dimnames(Addmat)
Amimat <- Addmat*Mtdmat
Dmgmat <- Addmat*Addmat
# Trial-Combination 11
ad2 <- .4
dd2 <- .1
cn2 <- .1
ce2 <- .1
mt2 <- .05
am2 <- .05
ee2 <- .20
trueComp <- c(ad2, dd2, cn2, ce2, mt2, am2, ee2)
sum(trueComp) == 1
## generate data
library(mvtnorm)
sumCov <- ad2*Addmat + dd2*Addmat*Addmat + cn2*Nucmat + ce2*Extmat + mt2*Mtdmat + am2*Addmat*Mtdmat + ee2*Envmat
set.seed(8141)
numfam <- 200
dat <- rmvnorm(numfam, sigma = sumCov)
# fit ML model
totalVar <- 1
totalMea <- 0
Model1 <- mxModel(
"ModelOne",
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ad2*totalVar, labels = "vad", name = "Vad", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = dd2*totalVar, labels = "vdd", name = "Vdd", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = cn2*totalVar, labels = "vcn", name = "Vcn", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ce2*totalVar, labels = "vce", name = "Vce", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = mt2*totalVar, labels = "vmt", name = "Vmt", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = am2*totalVar, labels = "vam", name = "Vam", lbound = 1e-10),
mxMatrix(type = "Full", nrow = 1, ncol = 1, free = TRUE, values = ee2*totalVar, labels = "ver", name = "Ver", lbound = 1e-10)
)
ll <- list()
for (i in 1:numfam){
ll[[i]] <- dat[i,]
}
modList <- list()
modNames <- paste0("fam", 1:numfam)
for(afam in 1:numfam){
ytemp <- paste('S', rownames (Addmat))
fsize <- nrow(Addmat)
modList[[afam]] <- mxModel(name=modNames[afam],
mxMatrix("Iden", nrow=fsize, ncol=fsize, name="I"),
mxMatrix("Unit", nrow=fsize, ncol=fsize, name='U'),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Addmat, name="A"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Dmgmat, name="D"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Nucmat, name="Cn"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Extmat, name="Ce"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Amimat, name="Am"),
mxMatrix("Symm", nrow=fsize, ncol=fsize, values=Mtdmat, name="Mt"),
mxData(observed = matrix(ll[[afam]], nrow=1, dimnames=list(NULL, ytemp)), type="raw", sort=FALSE),
mxMatrix('Full', nrow=1, ncol=fsize, name='M', free=TRUE, labels='meanLI',
dimnames=list(NULL, ytemp)),
mxAlgebra ((A %x% ModelOne.Vad)
+ (D %x% ModelOne.Vdd)
+ (Cn %x% ModelOne.Vcn)
+ (U %x% ModelOne.Vce)
+ (Mt %x% ModelOne.Vmt)
+ (Am %x% ModelOne.Vam)
+ (I %x% ModelOne.Ver),
name="V", dimnames=list(ytemp, ytemp)),
mxExpectationNormal(covariance='V', means='M'),
mxFitFunctionML()
)
}
container <- mxModel('Model2', Model1, modList, mxFitFunctionMultigroup(modNames))
container <- mxOption(container, 'Checkpoint Units', 'minutes')
container <- mxOption(container, 'Checkpoint Count', 1)
containerRun <- mxRun(container, intervals=FALSE, checkpoint=TRUE)
summary(containerRun)
#summary(containerRun, verbose=TRUE)
#mxEval(cbind(vad, vcn, ver)/(vad+vcn+ver), containerRun)
View(Addmat)
load("~/R-Project/BalancedPed/0319kpc5ng6.RData")
View(Mtdmat)
View(Addmat)
View(Mtdmat)
sampleFam <- SimPed(kpc = 1, Ngen = 6)
sampleFam <- SimPed(kpc = 2, Ngen = 6)
sampleFam <- SimPed(kpc = 1, Ngen = 6, marR =1 )
sampleFam <- SimPed(kpc = 1, Ngen = 6, marR =.99 )
sampleFam <- SimPed(kpc = 1.5, Ngen = 6, marR =.8 )
sampleFam <- SimPed(kpc = 25, Ngen = 3)
View(sampleFam)
sampleFam <- SimPed(kpc = 25, Ngen = 4)
View(sampleFam)
